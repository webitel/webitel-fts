// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"github.com/google/wire"
	"github.com/webitel/webitel-fts/config"
	"github.com/webitel/webitel-fts/internal/handler"
	"github.com/webitel/webitel-fts/internal/service"
	"github.com/webitel/webitel-fts/internal/store"
)

import (
	_ "github.com/webitel/webitel-go-kit/otel/sdk/log/otlp"
	_ "github.com/webitel/webitel-go-kit/otel/sdk/log/stdout"
	_ "github.com/webitel/webitel-go-kit/otel/sdk/metric/otlp"
	_ "github.com/webitel/webitel-go-kit/otel/sdk/metric/stdout"
	_ "github.com/webitel/webitel-go-kit/otel/sdk/trace/otlp"
	_ "github.com/webitel/webitel-go-kit/otel/sdk/trace/stdout"
)

// Injectors from wire.go:

func initAppResources(contextContext context.Context, configConfig *config.Config) (*resources, func(), error) {
	logger, cleanup, err := log(configConfig)
	if err != nil {
		return nil, nil, err
	}
	searchEngine, cleanup2, err := search(configConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, cleanup3, err := setupApiClient(configConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, cleanup4, err := grpcSrv(configConfig, logger, client)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	manager, cleanup5, err := pubsubConn(logger, configConfig)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cluster, cleanup6, err := setupCluster(configConfig, server)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cmdResources := &resources{
		search:    searchEngine,
		log:       logger,
		grpcSrv:   server,
		pubsub:    manager,
		cluster:   cluster,
		apiClient: client,
	}
	return cmdResources, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func initAppHandlers(cmdResources *resources) (*handlers, error) {
	logger := cmdResources.log
	searchEngine := cmdResources.search
	indexEngine := store.NewIndexEngine(searchEngine, logger)
	serviceIndexEngine := service.NewIndexEngine(logger, indexEngine)
	server := cmdResources.grpcSrv
	client := cmdResources.apiClient
	handlerSearchEngine := handler.NewSearchEngine(serviceIndexEngine, server, client)
	manager := cmdResources.pubsub
	subscriber := handler.NewSubscriber(manager, logger, serviceIndexEngine)
	cmdHandlers := &handlers{
		searchEngine: handlerSearchEngine,
		subscriber:   subscriber,
	}
	return cmdHandlers, nil
}

func initSetupResources(contextContext context.Context, configConfig *config.Config) (*resources, func(), error) {
	logger, cleanup, err := log(configConfig)
	if err != nil {
		return nil, nil, err
	}
	searchEngine, cleanup2, err := search(configConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cmdResources := &resources{
		log:    logger,
		search: searchEngine,
	}
	return cmdResources, func() {
		cleanup2()
		cleanup()
	}, nil
}

func initSetupHandlers(cmdResources *resources) (*handlers, error) {
	searchEngine := cmdResources.search
	management := store.NewManagement(searchEngine)
	logger := cmdResources.log
	serviceManagement := service.NewManagement(management, logger)
	handlerManagement := handler.NewManagement(serviceManagement)
	cmdHandlers := &handlers{
		management: handlerManagement,
	}
	return cmdHandlers, nil
}

func initImportResources(contextContext context.Context, configConfig *config.Config) (*resources, func(), error) {
	logger, cleanup, err := log(configConfig)
	if err != nil {
		return nil, nil, err
	}
	searchEngine, cleanup2, err := search(configConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sqlStore, cleanup3, err := setupSql(logger, configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cmdResources := &resources{
		log:    logger,
		search: searchEngine,
		sql:    sqlStore,
	}
	return cmdResources, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func initImportHandlers(cmdResources *resources) (*handlers, error) {
	logger := cmdResources.log
	sqlStore := cmdResources.sql
	searchEngine := cmdResources.search
	handlerImportData := handler.NewImport(logger, sqlStore, searchEngine)
	cmdHandlers := &handlers{
		importData: handlerImportData,
	}
	return cmdHandlers, nil
}

// wire.go:

var wireAppResourceSet = wire.NewSet(
	search, log, grpcSrv, pubsubConn, setupCluster, setupApiClient,
)

var wireAppHandlersSet = wire.NewSet(store.NewIndexEngine, service.NewIndexEngine, wire.Bind(new(service.IndexEngineStore), new(*store.IndexEngine)), handler.NewSearchEngine, wire.Bind(new(handler.SearchEngineService), new(*service.IndexEngine)), handler.NewSubscriber, wire.Bind(new(handler.SubscriberService), new(*service.IndexEngine)))

// Setup cmd
var wireSetupResourceSet = wire.NewSet(
	search, log, pubsubConn,
)

var wireSetupHandlersSet = wire.NewSet(store.NewManagement, service.NewManagement, wire.Bind(new(service.ManagementStore), new(*store.Management)), handler.NewManagement, wire.Bind(new(handler.ManagementService), new(*service.Management)))

// Import cmd
var wireImportResourceSet = wire.NewSet(
	search, log, setupSql,
)

var wireImportHandlersSet = wire.NewSet(handler.NewImport)
